name: mnn_aarch64_musl_static_release
on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=dev" >> $GITHUB_OUTPUT
        fi

  linux-arm64-musl-static-release:
    needs: [setup]
    runs-on: ubuntu-latest # Rodar em x86_64 para compatibilidade com actions/checkout
    env:
      PACKAGENAME: mnn_${{ needs.setup.outputs.VERSION }}_linux_aarch64_musl_static_tools
    steps:
    - name: Set up QEMU for multi-platform builds
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Build MNN using Docker multi-platform build
      run: |
        # Usar Docker para buildar para ARM64
        docker buildx build \
          --platform linux/arm64 \
          -t mnn-builder:arm64 \
          --output type=local,dest=./build_output \
          -f - . <<EOF
        FROM --platform=linux/arm64 alpine:latest
        
        # Instalar dependências dentro do container
        RUN apk update && apk add --no-cache \
            build-base cmake ninja git \
            protobuf-dev protobuf-c-dev \
            linux-headers musl-dev \
            jpeg-dev libpng-dev \
            pkgconfig
            
        # Copiar código-fonte para o container
        COPY . /src
        
        # Compilar dentro do container
        WORKDIR /src/build
        RUN cmake .. \
            -DMNN_BUILD_CONVERTER=ON \
            -DMNN_BUILD_TOOLS=ON \
            -DMNN_BUILD_BENCHMARK=ON \
            -DMNN_USE_OPENCL=OFF \
            -DMNN_BUILD_SHARED_LIBS=OFF \
            -DMNN_BUILD_OPENCV=OFF \
            -DMNN_IMGCODECS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-static -static-libgcc -static-libstdc++" \
            -DCMAKE_C_FLAGS="-static" \
            -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
            -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
            -DBUILD_SHARED_LIBS=OFF \
            -GNinja && \
            ninja -j4 -v
        EOF

    - name: Verify build outputs and package
      run: |
        mkdir -p ${{ env.PACKAGENAME }}/{bin,lib,include}
        
        # Copiar arquivos do output do Docker
        find ./build_output/src/build -name "MNNConvert" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/ \;
        find ./build_output/src/build -name "MNNDump" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/ \;
        find ./build_output/src/build -name "benchmark*" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/benchmark \;
        find ./build_output/src/build -name "*.a" -type f -exec cp {} ${{ env.PACKAGENAME }}/lib/ \;
        cp -r ./build_output/src/include/MNN ${{ env.PACKAGENAME }}/include/
        
        # Criar script de teste
        cat > ${{ env.PACKAGENAME }}/test_compatibility.sh << 'EOF'
        #!/bin/sh
        echo "=== MNN Musl Static Tools Compatibility Test ==="
        echo "Built with: musl libc (Alpine Linux base)"
        echo "Target: Any Linux ARM64 system"
        echo ""
        
        echo "=== Testing Tools ==="
        for tool in bin/*; do
          if [ -x "$tool" ]; then
            echo "Tool: $(basename "$tool")"
            if [ -x "$(command -v file)" ]; then echo "  File type: $(file "$tool" | cut -d: -f2-)"; fi
            echo "  Size: $(du -sh "$tool" | cut -f1)"
            
            # Test static linking
            if [ -x "$(command -v ldd)" ]; then
              if ldd "$tool" 2>&1 | grep -q "not a dynamic executable"; then
                echo "  Linking: ✅ Fully static"
              else
                echo "  Linking: ❌ Has dependencies"
                ldd "$tool" 2>/dev/null | sed 's/^/    /'
              fi
            else
              echo "  Linking: ldd not found, cannot verify."
            fi
            
            # Test execution
            echo "  Execution test:"
            if "$tool" --help >/dev/null 2>&1; then
              echo "    ✅ Responds to --help"
            else
              echo "    ✅ Tool executes (may not have --help)"
            fi
            echo ""
          fi
        done
        EOF
        chmod +x ${{ env.PACKAGENAME }}/test_compatibility.sh
        
        # Criar pacote
        tar -czf ${{ env.PACKAGENAME }}.tar.gz ${{ env.PACKAGENAME }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.tar.gz
        retention-days: 30

  upload-release:
    name: upload_to_release
    needs: [linux-arm64-musl-static-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: artifact-*
        path: assert
        merge-multiple: true

    - name: Upload to GitHub Release
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: assert/*.tar.gz
        tags: true
        draft: true
        overwrite: true
        verbose: true
