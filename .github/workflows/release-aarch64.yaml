name: mnn_aarch64_musl_static_release
on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=dev" >> $GITHUB_OUTPUT
        fi

  linux-arm64-musl-static-release:
    needs: [setup]
    runs-on: ubuntu-24.04-arm  
    env:
      PACKAGENAME: mnn_${{ needs.setup.outputs.VERSION }}_linux_aarch64_musl_static_tools
    container:
      image: alpine:latest  # Alpine usa musl por padrão
    steps:
    - name: Install build dependencies (Alpine/musl)
      run: |
        # Alpine package manager
        apk update
        apk add --no-cache \
          build-base cmake ninja git \
          protobuf-dev protobuf-c-dev \
          linux-headers musl-dev \
          jpeg-dev libpng-dev \
          pkgconfig
    
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Build MNN with musl static linking
      run: |
        mkdir build && cd build
        
        # Configuração para musl static
        cmake .. \
          -DMNN_BUILD_CONVERTER=ON \
          -DMNN_BUILD_TOOLS=ON \
          -DMNN_BUILD_BENCHMARK=ON \
          -DMNN_USE_OPENCL=OFF \
          -DMNN_BUILD_SHARED_LIBS=OFF \
          -DMNN_BUILD_OPENCV=OFF \
          -DMNN_IMGCODECS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_FLAGS="-static -static-libgcc -static-libstdc++" \
          -DCMAKE_C_FLAGS="-static" \
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
          -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
          -DBUILD_SHARED_LIBS=OFF \
          -GNinja
        
        ninja -j4 -v
    
    - name: Verify musl static binaries
      run: |
        echo "=== Checking musl static binaries ==="
        find build -name "MNNConvert" -type f -executable 2>/dev/null | while read file; do
          echo "=== Testing: $file ==="
          
          # Verificar tipo de arquivo
          file "$file"
          
          # Verificar se é estático
          if ldd "$file" 2>&1 | grep -q "not a dynamic executable"; then
            echo "✅ Static binary"
          else
            echo "❌ Still has dependencies:"
            ldd "$file" 2>/dev/null || echo "ldd failed"
          fi
          
          # Testar execução básica
          echo "=== Basic execution test ==="
          "$file" --help 2>&1 | head -5 || {
            echo "Testing with no args..."
            "$file" 2>&1 | head -5 || echo "Binary failed to run"
          }
          
          echo "Size: $(du -sh "$file" | cut -f1)"
          echo "--------------------------------"
        done
    
    - name: Package musl static tools
      run: |
        mkdir -p ${{ env.PACKAGENAME }}/{bin,lib,include}
        
        # Copiar binários testados
        find build -name "MNNConvert" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/ \; 2>/dev/null || echo "MNNConvert not found"
        find build -name "MNNDump" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/ \; 2>/dev/null || echo "MNNDump not found" 
        find build -name "benchmark*" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/benchmark \; 2>/dev/null || echo "benchmark not found"
        find build -name "MNNV2Basic*" -type f -executable -exec cp {} ${{ env.PACKAGENAME }}/bin/ \; 2>/dev/null || echo "MNNV2Basic not found"
        
        # Bibliotecas estáticas
        find build -name "libMNN.a" -type f -exec cp {} ${{ env.PACKAGENAME }}/lib/ \; 2>/dev/null || echo "libMNN.a not found"
        find build -name "libMNN_Express.a" -type f -exec cp {} ${{ env.PACKAGENAME }}/lib/ \; 2>/dev/null || echo "libMNN_Express.a not found"
        
        # Headers
        cp -r include/MNN ${{ env.PACKAGENAME }}/include/ 2>/dev/null || echo "Headers not copied"
        
        # Script de teste melhorado
        cat > ${{ env.PACKAGENAME }}/test_compatibility.sh << 'EOF'
        #!/bin/sh
        echo "=== MNN Musl Static Tools Compatibility Test ==="
        echo "Built with: musl libc (Alpine Linux base)"
        echo "Target: Any Linux ARM64 system"
        echo ""
        
        echo "=== System Info ==="
        uname -a
        echo ""
        
        echo "=== Testing Tools ==="
        for tool in bin/*; do
          if [ -x "$tool" ]; then
            echo "Tool: $(basename "$tool")"
            echo "  File type: $(file "$tool" | cut -d: -f2-)"
            echo "  Size: $(du -sh "$tool" | cut -f1)"
            
            # Test static linking
            if ldd "$tool" 2>&1 | grep -q "not a dynamic executable"; then
              echo "  Linking: ✅ Fully static"
            else
              echo "  Linking: ❌ Has dependencies"
              ldd "$tool" 2>/dev/null | sed 's/^/    /'
            fi
            
            # Test execution
            echo "  Execution test:"
            if "$tool" --help >/dev/null 2>&1; then
              echo "    ✅ Responds to --help"
            elif "$tool" --version >/dev/null 2>&1; then
              echo "    ✅ Responds to --version" 
            else
              echo "    ⚠️  Testing basic execution..."
              if timeout 5 "$tool" 2>&1 | grep -i -E "(usage|convert|error|invalid)" >/dev/null; then
                echo "    ✅ Tool responds (shows usage/error as expected)"
              else
                echo "    ❌ Tool does not respond properly"
              fi
            fi
            echo ""
          fi
        done
        
        echo "=== Compatibility Notes ==="
        echo "• Built with musl libc for maximum compatibility"
        echo "• Should work on any ARM64 Linux system"  
        echo "• No external dependencies required"
        echo "• Tested binary size is optimized for musl static linking"
        EOF
        chmod +x ${{ env.PACKAGENAME }}/test_compatibility.sh
        
        # README específico para musl
        cat > ${{ env.PACKAGENAME }}/README.md << 'EOF'
        # MNN Musl Static Tools for ARM64 Linux
        
        **Statically linked with musl libc for maximum compatibility**
        
        ## Why musl instead of glibc?
        
        - **Better static linking**: musl is designed for static binaries
        - **Smaller size**: More efficient than glibc static builds  
        - **Universal compatibility**: Works on any ARM64 Linux system
        - **No version conflicts**: Self-contained binaries
        
        ## Contents
        
        - `bin/MNNConvert` - Convert ONNX/TensorFlow models to MNN
        - `bin/benchmark` - Performance benchmarking
        - `bin/MNNV2Basic.out` - Basic inference example
        - `lib/` - Static libraries for development
        - `include/` - C++ headers
        
        ## Quick Test
        
        ```
        ./test_compatibility.sh
        ./bin/MNNConvert --help
        ```
        
        ## Usage Examples
        
        ```
        # Convert ONNX to MNN
        ./bin/MNNConvert -f ONNX --modelFile model.onnx --MNNModel model.mnn
        
        # Benchmark inference
        ./bin/benchmark model.mnn 100
        ```
        
        Built on: Alpine Linux (musl libc)
        Target: ARM64 Linux (any distribution)
        EOF
        
        echo "=== Final Package Contents ==="
        find ${{ env.PACKAGENAME }} -type f | sort
    
    - name: Final compatibility test
      run: |
        cd ${{ env.PACKAGENAME }}
        echo "=== Running compatibility test ==="
        ./test_compatibility.sh
    
    - name: Create optimized package
      run: |
        # Strip binaries para reduzir tamanho
        find ${{ env.PACKAGENAME }}/bin -type f -executable -exec strip {} \; 2>/dev/null || true
        
        # Usar tar.xz para máxima compressão
        tar -cJf ${{ env.PACKAGENAME }}.tar.xz ${{ env.PACKAGENAME }}
        
        echo "=== Package Information ==="
        ls -lh ${{ env.PACKAGENAME }}.tar.xz
        echo "Compressed: $(du -sh ${{ env.PACKAGENAME }}.tar.xz | cut -f1)"
        echo "Uncompressed: $(du -sh ${{ env.PACKAGENAME }} | cut -f1)" 
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.tar.xz
        retention-days: 30

  upload-release:
    name: upload_to_release
    needs: [linux-arm64-musl-static-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: artifact-*
        path: assert
        merge-multiple: true

    - name: Upload to GitHub Release
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: assert/*.tar.xz
        tags: true
        draft: true
        overwrite: true
        verbose: true
